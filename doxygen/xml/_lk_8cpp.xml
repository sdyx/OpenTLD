<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.1">
  <compounddef id="_lk_8cpp" kind="file">
    <compoundname>Lk.cpp</compoundname>
    <includes refid="_lk_8h" local="yes">Lk.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cv.h</includes>
    <includes local="no">highgui.h</includes>
    <incdepgraph>
      <node id="1384">
        <label>cmath</label>
      </node>
      <node id="1386">
        <label>highgui.h</label>
      </node>
      <node id="1382">
        <label>Lk.h</label>
        <link refid="_lk_8h"/>
        <childnode refid="1383" relation="include">
        </childnode>
      </node>
      <node id="1385">
        <label>cstdio</label>
      </node>
      <node id="1383">
        <label>cv.h</label>
      </node>
      <node id="1381">
        <label>src/libopentld/mftracker/Lk.cpp</label>
        <link refid="Lk.cpp"/>
        <childnode refid="1382" relation="include">
        </childnode>
        <childnode refid="1384" relation="include">
        </childnode>
        <childnode refid="1385" relation="include">
        </childnode>
        <childnode refid="1383" relation="include">
        </childnode>
        <childnode refid="1386" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_lk_8cpp_1af50babfff1c5fe54579431e28e45e7ad" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_COUNT</definition>
        <argsstring></argsstring>
        <name>MAX_COUNT</name>
        <initializer> 500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="35" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lk_8cpp_1a52ae776a7c4ac1e8bce389e803672048" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_IMG</definition>
        <argsstring></argsstring>
        <name>MAX_IMG</name>
        <initializer> 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="36" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="36" bodyend="-1"/>
        <referencedby refid="_lk_8h_1a72f8af92e33c2f2c05d9d0b1ecbbc3c6" compoundref="_lk_8cpp" startline="116" endline="135">initImgs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double N_A_N</definition>
        <argsstring></argsstring>
        <name>N_A_N</name>
        <initializer> -1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="37" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="37" bodyend="-1"/>
        <referencedby refid="_lk_8h_1aeb798560b2c1eda165af271062b840ab" compoundref="_lk_8cpp" startline="162" endline="265">trackLK</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int win_size_lk</definition>
        <argsstring></argsstring>
        <name>win_size_lk</name>
        <initializer> 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of the search window of each pyramid level in cvCalcOpticalFlowPyrLK. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="41" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="41" bodyend="-1"/>
        <referencedby refid="_lk_8h_1aeb798560b2c1eda165af271062b840ab" compoundref="_lk_8cpp" startline="162" endline="265">trackLK</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" prot="public" static="no" mutable="no">
        <type>CvPoint2D32f *</type>
        <definition>CvPoint2D32f* points[3]</definition>
        <argsstring>[3]</argsstring>
        <name>points</name>
        <initializer> { 0, 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="42" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="42" bodyend="-1"/>
        <referencedby refid="_lk_8h_1aeb798560b2c1eda165af271062b840ab" compoundref="_lk_8cpp" startline="162" endline="265">trackLK</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_lk_8cpp_1acfa95a8daab71fc1d5dd357c187fb945" prot="public" static="yes" mutable="no">
        <type>IplImage **</type>
        <definition>IplImage** PYR</definition>
        <argsstring></argsstring>
        <name>PYR</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="43" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_lk_8cpp_1a6b1f0fbd52a55b99409b426f14d1b05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void euclideanDistance</definition>
        <argsstring>(CvPoint2D32f *point1, CvPoint2D32f *point2, float *match, int nPts)</argsstring>
        <name>euclideanDistance</name>
        <param>
          <type>CvPoint2D32f *</type>
          <declname>point1</declname>
        </param>
        <param>
          <type>CvPoint2D32f *</type>
          <declname>point2</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>match</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nPts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates euclidean distance between the point pairs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of points. Pairs with point2 at every Position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of points. Pairs with point1 at every Position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>match</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Contains the result of the distance calculation. Must have the length of nPts. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nPts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of pairs. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="55" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="53" bodyend="63"/>
        <referencedby refid="_lk_8h_1aeb798560b2c1eda165af271062b840ab" compoundref="_lk_8cpp" startline="162" endline="265">trackLK</referencedby>
      </memberdef>
      <memberdef kind="function" id="_lk_8cpp_1aecd9b4dead7bfe263a7a068dfb577839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void normCrossCorrelation</definition>
        <argsstring>(IplImage *imgI, IplImage *imgJ, CvPoint2D32f *points0, CvPoint2D32f *points1, int nPts, char *status, float *match, int winsize, int method)</argsstring>
        <name>normCrossCorrelation</name>
        <param>
          <type>IplImage *</type>
          <declname>imgI</declname>
        </param>
        <param>
          <type>IplImage *</type>
          <declname>imgJ</declname>
        </param>
        <param>
          <type>CvPoint2D32f *</type>
          <declname>points0</declname>
        </param>
        <param>
          <type>CvPoint2D32f *</type>
          <declname>points1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nPts</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>status</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>match</declname>
        </param>
        <param>
          <type>int</type>
          <declname>winsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates normalized cross correlation for every point. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imgI</parametername>
</parameternamelist>
<parameterdescription>
<para>Image 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imgJ</parametername>
</parameternamelist>
<parameterdescription>
<para>Image 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points0</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of points of imgI </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points1</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of points of imgJ </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nPts</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of array/number of points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch which point pairs should be calculated. if status[i] == 1 =&gt; match[i] is calculated. else match[i] = 0.0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>match</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Array will contain ncc values. 0.0 if not calculated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>winsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of quadratic area around the point which is compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the way how image regions are compared. see cvMatchTemplate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="85" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="82" bodyend="110"/>
        <referencedby refid="_lk_8h_1aeb798560b2c1eda165af271062b840ab" compoundref="_lk_8cpp" startline="162" endline="265">trackLK</referencedby>
      </memberdef>
      <memberdef kind="function" id="_lk_8cpp_1a72f8af92e33c2f2c05d9d0b1ecbbc3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initImgs</definition>
        <argsstring>()</argsstring>
        <name>initImgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Needed before start of trackLK and at the end of the program for cleanup. Handles PYR(Pyramid cache) variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="117" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="116" bodyend="135"/>
        <references refid="_lk_8cpp_1a52ae776a7c4ac1e8bce389e803672048" compoundref="_lk_8cpp" startline="36">MAX_IMG</references>
        <referencedby refid="_f_b_track_8h_1a2c818794e6fe6aa3f6efdc9c46ffd164" compoundref="_f_b_track_8cpp" startline="45" endline="150">fbtrack</referencedby>
      </memberdef>
      <memberdef kind="function" id="_lk_8cpp_1acaf626622b93b98f39c91967ccc26588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int trackLK</definition>
        <argsstring>(IplImage *imgI, IplImage *imgJ, float ptsI[], int nPtsI, float ptsJ[], int nPtsJ, int level, float *fb, float *ncc, char *status)</argsstring>
        <name>trackLK</name>
        <param>
          <type>IplImage *</type>
          <declname>imgI</declname>
        </param>
        <param>
          <type>IplImage *</type>
          <declname>imgJ</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ptsI</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>nPtsI</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ptsJ</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>nPtsJ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>fb</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ncc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tracks Points from 1.Image to 2.Image. Need initImgs before start and at the end of the program for cleanup.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imgI</parametername>
</parameternamelist>
<parameterdescription>
<para>previous Image source. (isn&apos;t changed) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imgJ</parametername>
</parameternamelist>
<parameterdescription>
<para>actual Image target. (isn&apos;t changed) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptsI</parametername>
</parameternamelist>
<parameterdescription>
<para>points to track from first Image. Format [0] = x1, [1] = y1, [2] = x2 ... </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nPtsI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of Points to track from first Image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptsJ</parametername>
</parameternamelist>
<parameterdescription>
<para>container for calculated points of second Image. Must have the length of nPtsI. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nPtsJ</parametername>
</parameternamelist>
<parameterdescription>
<para>number of Points </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Pyramidlevel, default 5 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para>forward-backward confidence value. (corresponds to euclidean distance between). Must have the length of nPtsI: nPtsI * sizeof(float). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncc</parametername>
</parameternamelist>
<parameterdescription>
<para>normCrossCorrelation values. needs as inputlength nPtsI * sizeof(float) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates positive tracks. 1 = PosTrack 0 = NegTrack needs as inputlength nPtsI * sizeof(char)</para></parameterdescription>
</parameteritem>
</parameterlist>
Based Matlab function: lk(2,imgI,imgJ,ptsI,ptsJ,Level) (Level is optional) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" line="164" bodyfile="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp" bodystart="162" bodyend="265"/>
        <references refid="_lk_8cpp_1a6b1f0fbd52a55b99409b426f14d1b05a" compoundref="_lk_8cpp" startline="53" endline="63">euclideanDistance</references>
        <references refid="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" compoundref="_lk_8cpp" startline="37">N_A_N</references>
        <references refid="_lk_8cpp_1aecd9b4dead7bfe263a7a068dfb577839" compoundref="_lk_8cpp" startline="82" endline="110">normCrossCorrelation</references>
        <references refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" compoundref="_lk_8cpp" startline="42">points</references>
        <references refid="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" compoundref="_lk_8cpp" startline="41">win_size_lk</references>
        <referencedby refid="_f_b_track_8h_1a2c818794e6fe6aa3f6efdc9c46ffd164" compoundref="_f_b_track_8cpp" startline="45" endline="150">fbtrack</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/>Copyright<sp/>2011<sp/>AIT<sp/>Austrian<sp/>Institute<sp/>of<sp/>Technology</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>OpenTLD.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/><sp/>OpenTLD<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/><sp/><sp/>OpenTLD<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/><sp/>along<sp/>with<sp/>OpenTLD.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_lk_8h" kindref="compound">Lk.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cv.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;highgui.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="_lk_8cpp_1af50babfff1c5fe54579431e28e45e7ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1af50babfff1c5fe54579431e28e45e7ad" kindref="member">MAX_COUNT</ref><sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="36" refid="_lk_8cpp_1a52ae776a7c4ac1e8bce389e803672048" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1a52ae776a7c4ac1e8bce389e803672048" kindref="member">MAX_IMG</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="37" refid="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" kindref="member">N_A_N</ref><sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="41" refid="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" kindref="member">win_size_lk</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="42" refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" refkind="member"><highlight class="normal">CvPoint2D32f<sp/>*<ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[3]<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IplImage<sp/>**PYR<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_lk_8cpp_1a6b1f0fbd52a55b99409b426f14d1b05a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1a6b1f0fbd52a55b99409b426f14d1b05a" kindref="member">euclideanDistance</ref>(CvPoint2D32f<sp/>*point1,<sp/>CvPoint2D32f<sp/>*point2,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*match,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPts)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nPts;<sp/>i++)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[i]<sp/>=<sp/>sqrt((point1[i].x<sp/>-<sp/>point2[i].x)<sp/>*<sp/>(point1[i].x<sp/>-<sp/>point2[i].x)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(point1[i].y<sp/>-<sp/>point2[i].y)<sp/>*<sp/>(point1[i].y<sp/>-<sp/>point2[i].y));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="_lk_8cpp_1aecd9b4dead7bfe263a7a068dfb577839" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1aecd9b4dead7bfe263a7a068dfb577839" kindref="member">normCrossCorrelation</ref>(IplImage<sp/>*imgI,<sp/>IplImage<sp/>*imgJ,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CvPoint2D32f<sp/>*points0,<sp/>CvPoint2D32f<sp/>*points1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPts,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*status,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*match,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>winsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>method)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>IplImage<sp/>*rec0<sp/>=<sp/>cvCreateImage(cvSize(winsize,<sp/>winsize),<sp/>8,<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>IplImage<sp/>*rec1<sp/>=<sp/>cvCreateImage(cvSize(winsize,<sp/>winsize),<sp/>8,<sp/>1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>IplImage<sp/>*res<sp/>=<sp/>cvCreateImage(cvSize(1,<sp/>1),<sp/>IPL_DEPTH_32F,<sp/>1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nPts;<sp/>i++)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status[i]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvGetRectSubPix(imgI,<sp/>rec0,<sp/>points0[i]);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvGetRectSubPix(imgJ,<sp/>rec1,<sp/>points1[i]);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvMatchTemplate(rec0,<sp/>rec1,<sp/>res,<sp/>method);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[i]<sp/>=<sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)(res-&gt;imageData))[0];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>cvReleaseImage(&amp;rec0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>cvReleaseImage(&amp;rec1);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>cvReleaseImage(&amp;res);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="_lk_8h_1a72f8af92e33c2f2c05d9d0b1ecbbc3c6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1a72f8af92e33c2f2c05d9d0b1ecbbc3c6" kindref="member">initImgs</ref>()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PYR<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="_lk_8cpp_1a52ae776a7c4ac1e8bce389e803672048" kindref="member">MAX_IMG</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvReleaseImage(&amp;(PYR[i]));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PYR[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(PYR);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PYR<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;LK:<sp/>deallocated\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>PYR<sp/>=<sp/>(IplImage<sp/>**)<sp/>calloc(<ref refid="_lk_8cpp_1a52ae776a7c4ac1e8bce389e803672048" kindref="member">MAX_IMG</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IplImage<sp/>*));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;LK:<sp/>initialized\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="_lk_8h_1aeb798560b2c1eda165af271062b840ab" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_lk_8cpp_1acaf626622b93b98f39c91967ccc26588" kindref="member">trackLK</ref>(IplImage<sp/>*imgI,<sp/>IplImage<sp/>*imgJ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ptsI[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPtsI,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ptsJ[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPtsJ,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*fb,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ncc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*status)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>watch<sp/>NaN<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>nan<sp/>=<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>inf<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tracking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I,<sp/>J,<sp/>winsize_ncc;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>CvSize<sp/>pyr_sz;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>unused<sp/>std<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>J<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>winsize_ncc<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//NOTE:<sp/>initImgs()<sp/>must<sp/>be<sp/>used<sp/>correctly<sp/>or<sp/>memleak<sp/>will<sp/>follow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>pyr_sz<sp/>=<sp/>cvSize(imgI-&gt;width<sp/>+<sp/>8,<sp/>imgI-&gt;height<sp/>/<sp/>3);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>PYR[I]<sp/>=<sp/>cvCreateImage(pyr_sz,<sp/>IPL_DEPTH_32F,<sp/>1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>PYR[J]<sp/>=<sp/>cvCreateImage(pyr_sz,<sp/>IPL_DEPTH_32F,<sp/>1);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nPtsJ<sp/>!=<sp/>nPtsI)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>input!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[0]<sp/>=<sp/>(CvPoint2D32f<sp/>*)<sp/>malloc(nPtsI<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CvPoint2D32f));<sp/></highlight><highlight class="comment">//<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1]<sp/>=<sp/>(CvPoint2D32f<sp/>*)<sp/>malloc(nPtsI<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CvPoint2D32f));<sp/></highlight><highlight class="comment">//<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[2]<sp/>=<sp/>(CvPoint2D32f<sp/>*)<sp/>malloc(nPtsI<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CvPoint2D32f));<sp/></highlight><highlight class="comment">//<sp/>forward-backward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:Free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBacktrack<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(nPtsI);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nPtsI;<sp/>i++)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[0][i].x<sp/>=<sp/>ptsI[2<sp/>*<sp/>i];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[0][i].y<sp/>=<sp/>ptsI[2<sp/>*<sp/>i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1][i].x<sp/>=<sp/>ptsJ[2<sp/>*<sp/>i];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1][i].y<sp/>=<sp/>ptsJ[2<sp/>*<sp/>i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[2][i].x<sp/>=<sp/>ptsI[2<sp/>*<sp/>i];</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[2][i].y<sp/>=<sp/>ptsI[2<sp/>*<sp/>i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lucas<sp/>kanade<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>cvCalcOpticalFlowPyrLK(imgI,<sp/>imgJ,<sp/>PYR[I],<sp/>PYR[J],<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[0],<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1],</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPtsI,<sp/>cvSize(<ref refid="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" kindref="member">win_size_lk</ref>,<sp/><ref refid="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" kindref="member">win_size_lk</ref>),<sp/>level,<sp/>status,<sp/>0,<sp/>cvTermCriteria(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_TERMCRIT_ITER<sp/>|<sp/>CV_TERMCRIT_EPS,<sp/>20,<sp/>0.03),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_LKFLOW_INITIAL_GUESSES);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//backtrack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>cvCalcOpticalFlowPyrLK(imgJ,<sp/>imgI,<sp/>PYR[J],<sp/>PYR[I],<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1],<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[2],</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPtsI,<sp/>cvSize(<ref refid="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" kindref="member">win_size_lk</ref>,<sp/><ref refid="_lk_8cpp_1a9e5babd1e574af17a2b200cb34933a00" kindref="member">win_size_lk</ref>),<sp/>level,<sp/>statusBacktrack,<sp/>0,<sp/>cvTermCriteria(</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_TERMCRIT_ITER<sp/>|<sp/>CV_TERMCRIT_EPS,<sp/>20,<sp/>0.03),</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_LKFLOW_INITIAL_GUESSES<sp/>|<sp/>CV_LKFLOW_PYR_A_READY<sp/>|<sp/>CV_LKFLOW_PYR_B_READY);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nPtsI;<sp/>i++)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status[i]<sp/>&amp;&amp;<sp/>statusBacktrack[i])</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1aecd9b4dead7bfe263a7a068dfb577839" kindref="member">normCrossCorrelation</ref>(imgI,<sp/>imgJ,<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[0],<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1],<sp/>nPtsI,<sp/>status,<sp/>ncc,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>winsize_ncc,<sp/>CV_TM_CCOEFF_NORMED);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a6b1f0fbd52a55b99409b426f14d1b05a" kindref="member">euclideanDistance</ref>(<ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[0],<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[2],<sp/>fb,<sp/>nPtsI);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nPtsI;<sp/>i++)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status[i]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptsJ[2<sp/>*<sp/>i]<sp/>=<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1][i].x;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptsJ[2<sp/>*<sp/>i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[1][i].y;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//flow<sp/>for<sp/>the<sp/>corresponding<sp/>feature<sp/>hasn&apos;t<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Todo:<sp/>shell<sp/>realy<sp/>write<sp/>N_A_N<sp/>in<sp/>it?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptsJ[2<sp/>*<sp/>i]<sp/>=<sp/><ref refid="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" kindref="member">N_A_N</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptsJ[2<sp/>*<sp/>i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" kindref="member">N_A_N</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fb[i]<sp/>=<sp/><ref refid="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" kindref="member">N_A_N</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncc[i]<sp/>=<sp/><ref refid="_lk_8cpp_1a8e6cabe5b03bb93be3661dee66b4dadc" kindref="member">N_A_N</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[i]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lk_8cpp_1a050769e2adadebcaa87cd2362c274d0c" kindref="member">points</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>free(statusBacktrack);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/horst/repos/opentld-sdyx/src/libopentld/mftracker/Lk.cpp"/>
  </compounddef>
</doxygen>
